Problem Statement: Given an array consisting of only 0s, 1s, and 2s. Write a program to in-place sort the array without using inbuilt sort functions.
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Input: nums = [2,0,1]
Output: [0,1,2]

Input: nums = [0]
Output: [0]

Sol1 :
Brute Force :-
Time Complexity (TC): O(n)
Space Complexity (SC): O(1)
The code efficiently sorts the input array with a linear time complexity and constant space complexity.

class Solution {
    public void sortColors(int[] nums) {
       int count0 = 0, count1 = 0, count2 = 0;
       for(int i=0; i<nums.length; i++){
           if(nums[i] == 0){
               count0++;
           }else if(nums[i] == 1){
               count1++;
           }else{
               count2++;
           }
       }
       for(int i=0; i<count0; i++){
           nums[i] = 0;
       }
       for(int i=count0; i<count0+count1; i++){
           nums[i] = 1;
       }
       for(int i=count0+count1; i<count0+count1+count2; i++){
           nums[i] = 2;
       }
    }
}


Sol2 :-
Using Dutch National Flag Algorithm :
Time Complexity (TC): O(n)
Space Complexity (SC): O(1)
Overall, this code efficiently sorts an array of colors (0, 1, and 2) in place using the Dutch National Flag algorithm, with linear time complexity and constant space complexity.

class Solution {
    public void sortColors(int[] nums) {
        int low = 0, mid = 0, high = nums.length-1;
        while(mid <= high){
            if(nums[mid] == 0){
                int temp = nums[low];
                nums[low] = nums[mid];
                nums[mid] = temp;
                low++; 
                mid++;
            }
            else if(nums[mid] == 1){
                mid++;
            }
            else{
                int temp = nums[mid];
                nums[mid] = nums[high];
                nums[high] = temp;
                high--;
            }
        }
    }
}
