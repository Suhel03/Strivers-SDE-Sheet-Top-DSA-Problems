Problem Statement: Given an array of intervals, merge all the overlapping intervals and return an array of non-overlapping intervals.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

TC : O(N log N) + (N) && SC : O(N) at worst case

class Solution {
    public int[][] merge(int[][] intervals) {
        // TC : O(N log N) + (N) && SC : O(N) at worst case

        List<int[]> result = new ArrayList<>();
        if(intervals.length == 0 || intervals == null){
            return result.toArray(new int[0][]);
        }
        Arrays.sort(intervals, (a,b) -> a[0] - b[0]);

        int start = intervals[0][0];
        int end = intervals[0][1];

        for(int[] i : intervals){
            if(i[0] <= end){
                end = Math.max(end, i[1]);
            }else{
                result.add(new int[]{start, end});
                start = i[0];
                end = i[1];
            }
        } 
        result.add(new int[]{start, end});
        return result.toArray(new int[0][]);
    }
}
