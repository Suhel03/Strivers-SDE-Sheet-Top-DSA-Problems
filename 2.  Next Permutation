31. Next Permutation (Leetcode)
Problem Statement: Given an array Arr[] of integers, rearrange the numbers of the given array into the lexicographically next greater permutation of numbers.
If such an arrangement is not possible, it must rearrange to the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.

Sol 1: Brute Force (TC : (N!*N)) 
Step1: Find all possible Permutations of elements present and store them.
Step2: Search given input from all possible permitations.
Step3: Print the next permutation present right after it.



Sol 2: Optimized Solution 

Step 1: Find the break-point, i: Break-point means the first index i from the back of the given array where arr[i] becomes smaller than arr[i+1].
Step 2: If such a break-point does not exist i.e. if the array is sorted in decreasing order, the given permutation is the last one in the sorted order of all possible permutations.
        So, the next permutation must be the first one.
Step 3: If a break-point exists:
        1. Find the smallest number i.e. > arr[i] and in the right half of index i(i.e. from index i+1 to n-1) and swap it with arr[i].
        2. Reverse the entire right half(i.e. from index i+1 to n-1) of index i. And finally, return the array.

basicall:

-> a[i] < a[i + 1 ]
-> a[index 2] < a[index[1]
-> swap (a[index2] , a[index1])
-> reverse (index i + 1 to last index)

// TC: O(3N) n is the size of array
class Solution {
    public void nextPermutation(int[] nums) {
        if(nums == null || nums.length <= 1) return;
        int i = nums.length-2;
        while(i >= 0 && nums[i] >= nums[i+1]) i--;
        if(i >= 0){
            int j = nums.length-1;
            while(nums[j] <= nums[i]) j--;
            swap(nums, i, j);
        }
        reverse(nums, i+1, nums.length-1);
    }
    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    public void reverse(int[] nums, int i, int j){
        while(i < j) swap(nums, i++, j--);
    }
}

